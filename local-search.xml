<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>阿凡达: 水之道 观后感</title>
    <link href="/2023/02/28/2023-2-28/"/>
    <url>/2023/02/28/2023-2-28/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#"class="headerlink"title=""></a></h1><p><span>        那年我上初中, 如果没记错应该是初三的时候。当时家里开个小卖铺，生意不是特别好，只是服务同村的乡亲。钱没有赚到，我倒是吃了不少。我记得有一天晚上家里进了贼，偷走了一千块钱和一台笔记本电脑。那台笔记本电脑还是我小姨家的，只是性能不好被淘汰下来的。我常用它来看电影，玩游戏。</span></p><p><span>        我那时候喜欢玩 QQ 堂、泡泡堂。我也记得很多早期的影视软件，暴风影音、风行网、PPLive、PPS、PPTV 等。印象最深的就是 PPS 了，它也是我小时候的影视启蒙。恰恰是那一次进贼之后，我妈决定在楼梯下货物区放上床。打算每天晚上都睡在楼下，就算不睡在上面也起到威慑的作用。货架是背板是镂空的，楼梯间也是半封闭的。坐在床上就可以看到超市门口的情况。</span></p><p><span>        初中时我喜欢上网，如果没人管制我觉得我可以连续三天不闭眼。我爸为了让我发光特地在楼梯间装了台电脑，晚上我就担负起看超市的重任了。但其实非假期时间我还是会被撵到楼上睡觉。就是那段时间我看了好多的电影《电锯惊魂》系列、《速度与激情》系列、《指环王》系列、《星球大战》系列、漫威系列、DC 系列、成龙、周星驰、等很多经典影视。你能想象到一个假期在家里晚上吃着零食看着电影的感觉吗？在小小的楼梯间里很压抑也很安逸。</span></p><p><span>        也是那段时间我看了《阿凡达》这部电影，当时看完我整个人都不好了。在同时期我真的找不出特效比它更好的电影。那时候我看电影不太专注于剧情的逻辑，更多的是在特效和视觉效果上。但即使如此，阿凡达给我带来的震撼是当时其他电影所不能及的，让我永远的记住了潘多拉星。时隔 13 年《阿凡达：水之道》终于上映。时隔之久以至于当时都出现了名梗 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="那时候只知道《水之道》这个名字，但是一直没有公布上映时间。然后就经常有人在贴吧里面问阿凡达 2 谁知道什么时候出呀？ 谁知道？导演都在问谁知道。">[1]</span></a></sup>。</span></p><p><span>        简述一下剧情，杰克赶走了地球人，和 na’vi 人生活在了一起。生了两个儿子纳特亚姆、洛克和一个女儿图克，收养了人类男孩蜘蛛，收养了女博士的女儿琪莉，琪莉的父亲不知道是谁。上校变身 na’vi 人卷土重来，剑锋直指杰克。孩子调皮被上校擒获，杰克夫妻营救成功，蜘蛛被抓。杰克带领一家人躲到梅特卡伊纳族人的领地。琪莉感知伊娃发生癫痫，老友前来支援，上校发现行踪追查至此。双方展开大战，最后杰克大儿子牺牲，琪莉觉醒技能。</span></p><p><span>        从影视特效来说，第二部给我的震撼没有第一部强。特效上有所提升，但只提升了一点点。如果放在十年前，我可能会同样给出很高的评价。但是在现在我觉得很一般。唯一有突出的点应该是在一些图鲲的特写镜头上，因为这些是第一部所没有的。</span></p><p><span>        从剧情角度出发，第二部的剧情整体没有太多的 bug，很多点也都在剧情中进行了陈述。比如说琪莉的爸爸是谁，剧中没有交代，但是告诉了观众琪莉喜欢妈妈，不在乎爸爸是谁，甚至有点害怕知道爸爸是谁。孩子里面描述最多的就是蜘蛛和老二了，老二也是最像杰克的人。我估计下一部主角就要变成老二了。杰克大概率在下一部就要退休了。</span></p><p><span>        老大死了有点惋惜，年轻时我喜欢老二的性格。现在我更喜欢老大多一点，但事实上社会总是会给打破规矩的人给予奖励。</span></p><p> 总体评分：8 分 </p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span> 那时候只知道《水之道》这个名字，但是一直没有公布上映时间。然后就经常有人在贴吧里面问阿凡达 2 谁知道什么时候出呀？ 谁知道？导演都在问谁知道。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>影评</category>
      
    </categories>
    
    
    <tags>
      
      <tag>影评</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Optional 详解</title>
    <link href="/2023/02/27/java-optional/"/>
    <url>/2023/02/27/java-optional/</url>
    
    <content type="html"><![CDATA[<h1 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h1><div class="note note-success">            <p>我们都知道在 Java8 中引入了很多有用的 API, 其中就包含了<code>optional</code>。只要稍加运用就能够发现, 这个类可以大大减少开发者的代码输出, 也可以使代码更加的优雅, 让代码阅读者看见就想亲你两口</p>          </div><h2 id="1- 能做什么"><a href="#1- 能做什么" class="headerlink" title="1. 能做什么?"></a>1. 能做什么?</h2><p>在我们实际业务开发中, 大部分情况下交互数据库或者调用别人的接口时, 都不能保证对方传递过来的参数是否为空, 从而导致每次都要判断空指针。</p><p>如果我需要获取一个对象的名称并进行大些的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">(User user)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != user) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> user.getName();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != name) &#123;<br>            <span class="hljs-keyword">return</span> name.toUpperCase(Locale.ROOT);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>那如何使用 optional 进行的操作呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">(User user)</span> &#123;<br>    <span class="hljs-keyword">return</span> Optional.ofNullable(user)<br>            .map(User::getName)<br>            .map(String::toUpperCase)<br>            .orElse(<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这样不就即减少了代码的体积, 也大大增加了代码的可读性。尤其是在复杂的项目中体现尤为明显。所以更应该从里至外的了解这个类。</p><h2 id="2- 创建 -Optional- 实例"><a href="#2- 创建 -Optional- 实例" class="headerlink" title="2. 创建 Optional 实例"></a>2. 创建 Optional 实例 </h2><h3 id="构造方法"><a href="# 构造方法" class="headerlink" title="构造方法"></a> 构造方法</h3><div class="note note-success">            <p>创建 Optional 实例有三种方式：</p><ol><li>of(obj)</li><li>ofNullable(obj)</li><li>empty()</li></ol>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 返回一个 Optional 对象，如果传入参数是 Null  则会报 NPE，所以不太建议使用。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Optional&lt;T&gt; <span class="hljs-title function_">of</span><span class="hljs-params">(T value)</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Optional</span>&lt;&gt;(value);<br>   &#125;<br><br><span class="hljs-comment">// 返回一个 Optional 对象，可以传入 Null 值。如果这个方法传入的是 Null，则会生成一个空的 Optional 对象，可避免 NPE。</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Optional&lt;T&gt; <span class="hljs-title function_">ofNullable</span><span class="hljs-params">(T value)</span> &#123;<br>       <span class="hljs-keyword">return</span> value == <span class="hljs-literal">null</span> ? empty() : of(value);<br>   &#125;<br><br><span class="hljs-comment">// 生成一个空个 Option 对象</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>&lt;T&gt; Optional&lt;T&gt; <span class="hljs-title function_">empty</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>       Optional&lt;T&gt; t = (Optional&lt;T&gt;) EMPTY;    <span class="hljs-comment">//EMPTY = new Optional&lt;?&gt;();</span><br>       <span class="hljs-keyword">return</span> t;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="3- 常用方法"><a href="#3- 常用方法" class="headerlink" title="3. 常用方法"></a>3. 常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取获取 Optional 对象的 value 值。</span><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">// 判断 value 对象是否为空</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPresent</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">// 如果是空 那么就执行方法体内容</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ifPresent</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-built_in">super</span> T&gt; consumer)</span>;<br><br><span class="hljs-comment">// 如果值不等于 Null, 返回 value 值。否则返回 other（传入参数）。</span><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">orElse</span><span class="hljs-params">(T other)</span>;<br><br><span class="hljs-comment">// 如果值不等于 Null, 返回 value 值。否则执行方法获取;</span><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">orElseGet</span><span class="hljs-params">(Supplier&lt;? extends T&gt; other)</span>;<br><br><span class="hljs-comment">// 如果是空则抛出异常, 可自定义</span><br><span class="hljs-keyword">public</span> &lt;X <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Throwable</span>&gt; T <span class="hljs-title function_">orElseThrow</span><span class="hljs-params">(Supplier&lt;? extends X&gt; exceptionSupplier)</span> <span class="hljs-keyword">throws</span> X;<br> <br><span class="hljs-comment">// 如果方法里返回的是 true, 则 value 变为 null。一般和 orElse 一起使用</span><br><span class="hljs-keyword">public</span> Optional&lt;T&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(Predicate&lt;? <span class="hljs-built_in">super</span> T&gt; predicate)</span>;<br><br><span class="hljs-comment">// 执行方法返回新的类型 Optional&lt;A&gt; -&gt; Optional&lt;B&gt;</span><br><span class="hljs-keyword">public</span>&lt;U&gt; Optional&lt;U&gt; <span class="hljs-title function_">map</span><span class="hljs-params">(Function&lt;? <span class="hljs-built_in">super</span> T, ? extends U&gt; mapper)</span>;<br><br><span class="hljs-comment">// 执行方法返回新的类型 Optional&lt;A&gt; -&gt; Optional&lt;B&gt; 此方法和 map 类似 唯一的区别是 不会返回一个 Optional&lt;Optional&lt;A&gt;&gt; 类型的数据</span><br><span class="hljs-keyword">public</span> &lt;U&gt; Optional&lt;U&gt; <span class="hljs-title function_">flatMap</span><span class="hljs-params">(Function&lt;? <span class="hljs-built_in">super</span> T, ? extends Optional&lt;? extends U&gt;&gt; mapper)</span>;<br>       <br></code></pre></td></tr></table></figure><h2 id="4- 常用案例"><a href="#4- 常用案例" class="headerlink" title="4. 常用案例"></a>4. 常用案例</h2><h3 id="1-ifPresent"><a href="#1-ifPresent" class="headerlink" title="1.  ifPresent"></a>1.  ifPresent</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 选出 seq 最小的轮播图 ， 设置主图数据</span><br>req.getGoodsImgList()<br>        .stream()<br>        .min(Comparator.comparing(GoodsImgAO::getSeq, Comparator.naturalOrder()))<br>        <span class="hljs-comment">// 如果 Optional 值不为空 执行此方法！</span><br>        .ifPresent(e -&gt; goodsInfoDO.setMainImg(WebUrlHelper.saveStaticUrl(e.getImgUrl())));<br></code></pre></td></tr></table></figure><h3 id="2-orElse"><a href="#2-orElse" class="headerlink" title="2. orElse"></a>2. orElse</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OptionalTest</span> &#123;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">User</span> <span class="hljs-variable">userNull</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    &#123;<br>        user.setAge(<span class="hljs-number">45</span>);<br>        user.setName(<span class="hljs-string">&quot; 曹达华 &quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">orElseTest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> Optional.ofNullable(userNull).orElse(<span class="hljs-built_in">this</span>.user);<br>        System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>    &#125;<br>&#125;<span class="hljs-comment">// 打印： user = OptionalTest.User(name= 曹达华, age=20)</span><br></code></pre></td></tr></table></figure><h3 id="3-map"><a href="#3-map" class="headerlink" title="3. map"></a>3. map</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取 User 对象的名称并进行大写</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> Optional.ofNullable(user)<br>                .map(User::getName)<br>                .map(String::toUpperCase)<br>                .orElse(<span class="hljs-literal">null</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="结语"><a href="# 结语" class="headerlink" title="结语"></a>结语</h3><div class="note note-success">            <span><p>        如果你同意 <code> 字如其人 </code> 的观点, 那么我说 <code> 码如其人 </code> 你应该不难理解。虽然我不是最优秀的, 但是我要做最优雅的程序员。良好的代码风格不管是对于观察者、开发者或者 code review 都是一件非常酷的一件事情。</p></span>          </div>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA 类、方法模版</title>
    <link href="/2023/02/24/idea-masterplate/"/>
    <url>/2023/02/24/idea-masterplate/</url>
    
    <content type="html"><![CDATA[<h1 id="IDEA- 类、方法模版"><a href="#IDEA- 类、方法模版" class="headerlink" title="IDEA 类、方法模版"></a>IDEA 类、方法模版</h1><div class="note note-success">            <p><span>        在实际开发工作中对于不同的公司、项目都用的不一样的编码规范, 一个好的习惯, 不仅能增进同事之间的关系, 也大大降低了问责时寻找设计人的成本, 也大大减少了后期阅读者的时间成本, 当然时间久了自己也会忘记的。俗话说 <code>雁过留声 </code>、<code> 人过留名</code>。</span></p>          </div><p><span>      IDEA 本身就自带了很多模版来便利开发者。我们主要设置的是两种模版: 创建 Java 文件、方法的注释</span></p><h3 id="效果图"><a href="# 效果图" class="headerlink" title="效果图"></a>效果图</h3><ol><li><p>新增 Java 文件模版</p><img src="https://images-max.oss-cn-shanghai.aliyuncs.com/202302271018832.png" alt="image-20230227101800804" style="zoom:50%;" /></li><li><p>方法注释模版</p><img src="https://images-max.oss-cn-shanghai.aliyuncs.com/202302271341705.png" alt="image-20230227134115677" style="zoom:50%;" /></li></ol><h2 id="1- 创建 Java 文件模版"><a href="#1- 创建 Java 文件模版" class="headerlink" title="1. 创建 Java 文件模版"></a>1. 创建 Java 文件模版</h2><div class="note note-primary">            <ol><li>原版选择 File-&gt;Settings→Editor→File and Code Templates→Files→Class, 我使用了中文插件, 这里不进行详细赘述</li></ol>          </div><span><p>      可以看到创建 Class 时引入了一个参数”File Header.java”。对应的是 Files 旁边的 Includes→File Header 文件。而引入的这一部分其实就是创建 Class 文件的模版。 当然 File Header.java 也可以拓展出很多的功能。 内置模板是可编辑的, 可以包含一个代码片段, 除了静态文本、代码和注释。</p></span><img src="https://images-max.oss-cn-shanghai.aliyuncs.com/202302271031631.png" alt="image-20230227103149603" style="zoom:50%;" /><div class="note note-primary">            <ol start="2"><li>右侧填入以下文本</li></ol>          </div><div class="note note-warning">            <p>当新增类时, 会自动引入 <code>Lombok</code> 类, 如果不兼容去掉 <code> import lombok.Data;</code> 和<code>@Data</code>即可。</p><p>自动实现了 <code>Serializable</code> 类, 表示可进行序列化操作, 并生成 <code>serialVersionUID</code> 为当前时间精确到秒。</p>          </div><h3 id="文本"><a href="# 文本" class="headerlink" title="文本"></a>文本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">#<span class="hljs-keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="hljs-string">&quot;&quot;</span>)<span class="hljs-keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><br>#parse(<span class="hljs-string">&quot;File Header.java&quot;</span>)<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">$</span>&#123;NAME&#125; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> $&#123;YEAR&#125;$&#123;MONTH&#125;$&#123;DAY&#125;$&#123;HOUR&#125;$&#123;MINUTE&#125;$&#123;SECOND&#125;L;<br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-primary">            <ol start="3"><li>选择包含 -&gt; 编辑 File Header, 如果没有则新增。 File Header 里面填写 你需要的注释模版即可, 您还可以使用预定义的变量，这些变量将被扩展为相应的值。</li></ol>          </div><img src="https://images-max.oss-cn-shanghai.aliyuncs.com/202302271033964.png" alt="image-20230227103302909" style="zoom:50%;" /><h3 id="模版文案"><a href="# 模版文案" class="headerlink" title="模版文案"></a>模版文案</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>/**<br> * &lt;p&gt;<br> * TODO<br> * &lt;/p &gt;<br> * <br> * @author XXX<br> * @since <span class="hljs-variable">$&#123;YEAR&#125;</span>-<span class="hljs-variable">$&#123;MONTH&#125;</span>-<span class="hljs-variable">$&#123;DAY&#125;</span><br> */<br></code></pre></td></tr></table></figure><h3 id="变量值"><a href="# 变量值" class="headerlink" title="变量值"></a>变量值</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$&#123;PACKAGE_NAME&#125;</span>                在其中创建新文件的软件包名称<br><span class="hljs-variable">$&#123;USER&#125;</span>                        当前的用户系统登录名<br><span class="hljs-variable">$&#123;DATE&#125;</span>                        当前系统日期<br><span class="hljs-variable">$&#123;TIME&#125;</span>                        当前系统时间<br><span class="hljs-variable">$&#123;YEAR&#125;</span>                        当前年度<br><span class="hljs-variable">$&#123;MONTH&#125;</span>                       当前月份<br><span class="hljs-variable">$&#123;MONTH_NAME_SHORT&#125;</span>            当前月份名称的前 <span class="hljs-number">3</span> 个字母。 例如：Jan、Feb 等<br><span class="hljs-variable">$&#123;MONTH_NAME_FULL&#125;</span>             当前月份的全名。 例如：January、February 等<br><span class="hljs-variable">$&#123;DAY&#125;</span>                         当前月份的日期<br><span class="hljs-variable">$&#123;DAY_NAME_SHORT&#125;</span>              当前日期名称的前 <span class="hljs-number">3</span> 个字母。 例如：Mon、Tue 等<br><span class="hljs-variable">$&#123;DAY_NAME_FULL&#125;</span>               当前日期的全名。 例如：Monday、Tuesday 等<br><span class="hljs-variable">$&#123;HOUR&#125;</span>                        当前小时<br><span class="hljs-variable">$&#123;MINUTE&#125;</span>                      当前分钟<br><span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>                当前项目名称<br></code></pre></td></tr></table></figure><div class="note note-primary">            <ol start="4"><li>粘贴后保存即可。</li></ol>          </div><h2 id="2- 方法名模版"><a href="#2- 方法名模版" class="headerlink" title="2. 方法名模版"></a>2. 方法名模版</h2><div class="note note-info">            <p>此模版不仅支持请求参数和返回参数的展示, 还自动进行了格式化处理。支持复杂入参和返回值。</p><p><code>TODO</code> 是为了提醒开发者别忘记填写 </p><p><code>{@link XXX}</code> 是为了在渲染视图模式下可直接跳转到具体类</p>          </div><p>IDEA 还没有智能到自动为我们创建方法注释，这就是要我们手动为方法添加注释，我们的习惯是<code> /**+Enter</code>，这里我们也按照这种习惯来设置 IDEA 的方法注释</p><div class="note note-primary">            <ol><li>File–&gt;Settings–&gt;Editor–&gt;Live Templates 选择添加模版组(Template Group…)</li></ol>          </div><img src="https://images-max.oss-cn-shanghai.aliyuncs.com/202302271247779.png" alt="image-20230227124754752" style="zoom:50%;" /><div class="note note-primary">            <ol start="2"><li>填入新的组名。这里随便填写, 名称中文也没关系, 没有任何影响主要是为了方便你区分</li></ol>          </div><img src="https://images-max.oss-cn-shanghai.aliyuncs.com/202302271251240.png" alt="image-20230227125123208" style="zoom:50%;" /><div class="note note-primary">            <ol start="3"><li>点击 <code> 方法模版 </code> 再点击右上角 <code>+</code> 选择动态模版。</li></ol>          </div><p>按照之前所提的本人的习惯, 这里的缩写需要填写 * 号, 描述随意。右侧选项照抄即可。</p><img src="https://images-max.oss-cn-shanghai.aliyuncs.com/202302271257533.png" alt="image-20230227125711503" style="zoom:50%;" /><h3 id="模版文本"><a href="# 模版文本" class="headerlink" title="模版文本"></a><strong>模版文本</strong></h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">* <br> *  TODO<br> * <span class="hljs-variable">$param</span>$<br> * @return <span class="hljs-variable">$return</span>$<br> * @author myk <br> */<br></code></pre></td></tr></table></figure><p><span>这里的 <code>$param$</code>和 <code>$return$</code>为自定义参数, 分别表示入参和返回参数。</span></p><p>这里本人不喜欢太复杂的描述, 个人觉得方法注释的定义就是为了告诉阅读者 请求值和返回值 的类型、方法的功能, 而这两点是最重要的。</p><div class="note note-primary">            <ol start="4"><li>点击右侧编辑变量加入填入两个自定义参数名 param,return。</li></ol>          </div><img src="https://images-max.oss-cn-shanghai.aliyuncs.com/202302271309931.png" alt="image-20230227130922900" style="zoom:50%;" /><h3 id="表达式"><a href="# 表达式" class="headerlink" title="表达式:"></a>表达式:</h3><div class="note note-warning">            <p>这里的表达式其实就是 groovy 脚本文件, Idea 在很多地方都支持这种脚本语言。</p>          </div><p>其中 param 获取了所有的请求参数名称和类型 进行了遍历操作</p><p><strong>param</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs groovy">groovyScript(<span class="hljs-string">&quot;</span><br><span class="hljs-string">if(\&quot;$&#123;_1&#125;\&quot;.length() == 2) &#123; </span><br><span class="hljs-string">   return &#x27;&#x27;;     </span><br><span class="hljs-string">   &#125; else &#123;      </span><br><span class="hljs-string">       def int1 = 0;</span><br><span class="hljs-string">       def int2 = 0;   </span><br><span class="hljs-string">       def result=&#x27;&#x27;;   </span><br><span class="hljs-string">       def params=\&quot;$&#123;_1&#125;\&quot;</span><br><span class="hljs-string">       .replaceAll(&#x27;[\\\\[|\\\\]|\\\\s]&#x27;,&#x27;&#x27;)</span><br><span class="hljs-string">       .split(&#x27;,&#x27;)        </span><br><span class="hljs-string">       .toList();</span><br><span class="hljs-string">         def types =\&quot;$&#123;_2&#125;\&quot;</span><br><span class="hljs-string">       .replaceAll(&#x27;[\\\\[|\\\\]|\\\\s]&#x27;,&#x27;&#x27;)</span><br><span class="hljs-string">       .split(&#x27;,&#x27;)        </span><br><span class="hljs-string">       .toList();</span><br><span class="hljs-string">       </span><br><span class="hljs-string">       for(i = 0; i &lt; params.size(); i++) &#123;   </span><br><span class="hljs-string">           if(params[i]==&#x27;null&#x27;)&#123;  </span><br><span class="hljs-string">               return;     </span><br><span class="hljs-string">           &#125;else&#123;      </span><br><span class="hljs-string">               if (int1&lt;= params[i].length()) &#123; </span><br><span class="hljs-string">                   int1 = params[i].length();  </span><br><span class="hljs-string">               &#125;       </span><br><span class="hljs-string">           &#125;         </span><br><span class="hljs-string">       &#125;;     </span><br><span class="hljs-string">           for(i = 0; i &lt; params.size(); i++) &#123; </span><br><span class="hljs-string">               if(params[i]==&#x27;null&#x27;)&#123;  </span><br><span class="hljs-string">                   return;    </span><br><span class="hljs-string">               &#125;else&#123;     </span><br><span class="hljs-string">                   def s= &#x27;&#x27;;     </span><br><span class="hljs-string">                   int2 = int1-(params[i].length()); </span><br><span class="hljs-string">                   for(j = 0; j &lt; int2; j++)&#123;   </span><br><span class="hljs-string">                       s+=&#x27; &#x27;;           </span><br><span class="hljs-string">                   &#125;;             </span><br><span class="hljs-string">                       result+=&#x27;\\n * @param &#x27; + params[i] + s +&#x27; &#123;@link &#x27;+types[i]+&#x27;&#125;&#x27;   </span><br><span class="hljs-string">               &#125;   </span><br><span class="hljs-string">           &#125;; </span><br><span class="hljs-string">               return result;</span><br><span class="hljs-string">   &#125;</span><br><span class="hljs-string">&quot;</span>,methodParameters(),methodParameterTypes()); <br></code></pre></td></tr></table></figure><p><strong>return</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy">groovyScript(<span class="hljs-string">&quot;</span><br><span class="hljs-string">             def result=\&quot;$&#123;_1&#125;\&quot;;</span><br><span class="hljs-string">             if(result == &#x27;void&#x27;)&#123;</span><br><span class="hljs-string">                 return &#x27;&#x27;;</span><br><span class="hljs-string">             &#125;else&#123;</span><br><span class="hljs-string">                 return &#x27;&#123;@link &#x27;+result+&#x27;&#125;&#x27;;</span><br><span class="hljs-string">             &#125;</span><br><span class="hljs-string">             &quot;</span>,methodReturnType()<br>            )<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>点击确定之后左下角点击 <code>更改</code> 在所有位置中只选择 Java, 否则所有文件 进行 <code>/**+Enter</code> 操作都会出现模版信息</p>          </div><img src="https://images-max.oss-cn-shanghai.aliyuncs.com/202302271311981.png" style="zoom:50%;" /><div class="note note-primary">            <ol start="5"><li>点击确认保存即可, 在后续在方法上进行 <code>/**+Enter</code> 操作则会显示入参和返回值信息</li></ol>          </div><h2 id="结语"><a href="# 结语" class="headerlink" title="结语"></a>结语</h2><div class="note note-secondary">            <p>ok, 到此为止!</p><p>Idea 的类和方法的模版设置基本上就这些了, 在实际开发中一般不会过多的变动模版, 我这个模版是我迭代了多次所总结出来的最通用的模版。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 泛型</title>
    <link href="/2023/02/23/generic/"/>
    <url>/2023/02/23/generic/</url>
    
    <content type="html"><![CDATA[<h1 id="泛型"><a href="# 泛型" class="headerlink" title="泛型"></a>泛型 </h1><p> 自从以前学习泛型之后就一直没有使用过，或者说在项目的开发中没有写过泛型的模型。随着学习的深入也发现了自己的不足，故写下这篇文章作为总结。</p><h2 id="1- 什么是泛型"><a href="#1- 什么是泛型" class="headerlink" title="1. 什么是泛型"></a>1. 什么是泛型</h2><div class="note note-success">            <p><code>泛型 </code>：即参数化类型</p><p> 顾名思义，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时的类型定义成参数形式，（可以称为类型形参），然后在使用 &#x2F; 调用时传入具体的类型（类型实参）。</p>          </div><p>泛型的本质是为了参数化类型，（在不创建新的类型的情况下，通过泛型指定不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数可以在用在 <code> 类</code>、<code>接口 </code> 和<code>方法 </code> 中，分别称为：<code>泛型类 </code>、<code> 泛型接口 </code>、<code> 泛型方法</code>。</p><p>例如：GenericClass{}</p><h3 id="常用的泛型类型变量："><a href="# 常用的泛型类型变量：" class="headerlink" title="常用的泛型类型变量："></a>常用的泛型类型变量：</h3><div class="note note-success">            <p><code>E</code>：元素（Element），多用于框架</p><p><code>K</code>：关键字（Key）</p><p><code>N</code>：数字（Number）</p><p><code>T</code>：类型（Type)</p><p><code>V</code>：值（Value）</p><p><code>?</code>：通配符</p>          </div><h2 id="2- 为什么使用泛型"><a href="#2- 为什么使用泛型" class="headerlink" title="2. 为什么使用泛型"></a>2. 为什么使用泛型 </h2><p> 首先我们来看两个 Demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> genericity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericParadigm1</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String s1, String s2)</span> &#123;<br>        System.out.println(s1 + <span class="hljs-string">&quot;   &quot;</span> + s2);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Integer i1, Integer i2)</span> &#123;<br>        System.out.println(i1 + <span class="hljs-string">&quot;   &quot;</span> + i2);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Double d1, Double d2)</span> &#123;<br>        System.out.println(d1 + <span class="hljs-string">&quot;   &quot;</span> + d2);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>        add(<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>);<br>        add(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中可以看出，<code>add</code>方法其实执行的功能是一样的，但是由于参数类型的不同所以我们得给每个类型都重载一边，这样的话工作量巨大光 JDK 就几万个类。你年轻，你慢慢重载吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> genericity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericParadigm2</span> &#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-string">&quot;string&quot;</span>);<br>        list.add(<span class="hljs-number">1</span>);<br>        list.add(<span class="hljs-number">30L</span>);<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>());<br><br>        <span class="hljs-keyword">for</span> (Object o : list) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (String) o;<span class="hljs-comment">// 在这里强转 </span><br>            System.out.println(<span class="hljs-string">&quot;s = &quot;</span> + s);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 打印信息：</span><br><span class="hljs-comment">s = string</span><br><span class="hljs-comment">Exception in thread &quot;main&quot; java.lang.ClassCastException: ...</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>在上面代码中可以看出，在我们将一个对象放入集合中，集合不会记住对象的类型，当从集合中取对象时，该对象的编译类型变成了 <code>Object</code> 类型。</p><p>但如果都是 Object 类型我们使用的话就需要向下转型。如果向下转型在代码运行期间就很容易出现异常<code>ClassCastException</code>（类型转换异常）所以使用泛型来解决这个问题。</p><p>所以泛型的意义在于：</p><div class="note note-success">            <ol><li><strong>适用于多种数据类型执行相同的代码（代码复用）</strong></li><li><strong>泛型中的类型在使用时指定，不需要强制类型转换（类型安全，编译器会检查类型）</strong></li></ol>          </div><h2 id="3- 泛型类"><a href="#3- 泛型类" class="headerlink" title="3. 泛型类"></a>3. 泛型类 </h2><p> 定义一个泛型类：public class <code>GenericClass&lt;T&gt;</code>{}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> genericity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericClass</span>&lt;T&gt; &#123; <span class="hljs-comment">// &lt;T&gt; 表示泛型类</span><br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        GenericClass&lt;String&gt; string = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericClass</span>&lt;&gt;();<br>        string.setData(<span class="hljs-string">&quot; 我是你大爷 &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">data1</span> <span class="hljs-operator">=</span> string.getData();<br>        System.out.println(<span class="hljs-string">&quot;stringGenericClass = &quot;</span> + data1);<br>        <br>        GenericClass&lt;Integer&gt; integer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericClass</span>&lt;&gt;();<br>        integer.setData(<span class="hljs-number">20</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">data2</span> <span class="hljs-operator">=</span> integer.getData();<br>        System.out.println(<span class="hljs-string">&quot;integer = &quot;</span> + data2);<br>    &#125;<span class="hljs-comment">// 由此可以看出，不管是什么数据类型传递进去，取出来的时候还是该数据类型。</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4- 泛型接口"><a href="#4- 泛型接口" class="headerlink" title="4. 泛型接口"></a>4. 泛型接口 </h2><p> 定义一个泛型接口：public class <code>GenericInterface&lt;T&gt;</code>{}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> genericity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GenericInterface</span>&lt;T&gt; &#123; <span class="hljs-comment">// &lt;T&gt; 定义在接口上表示泛型接口</span><br>    <br>    T <span class="hljs-title function_">get</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(T data)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现泛型接口方式一：public class <code>ImplGenericInterface1&lt;T&gt;</code> implements <code>GenericIntercace&lt;T&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> genericity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImplGenericInterface1</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GenericInterface</span>&lt;T&gt; &#123;<br>    <br>    <span class="hljs-keyword">private</span> T data;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ImplGenericInterface1&lt;String&gt; impl = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImplGenericInterface1</span>&lt;&gt;();<br>        impl.set(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> impl.get();<br>        System.out.println(<span class="hljs-string">&quot;s = &quot;</span> + s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现泛型接口方式二：public class <code>ImplGenericInterface1&lt;T&gt;</code> implements <code>GenericIntercace&lt;T&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> genericity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImplGenericInterface2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GenericInterface</span>&lt;String&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String data)</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ImplGenericInterface2</span> <span class="hljs-variable">impl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImplGenericInterface2</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> impl.get();<br>        System.out.println(<span class="hljs-string">&quot;s = &quot;</span> + s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面两种实现方式可以看出：</p><div class="note note-success">            <ol><li>实现类 <code>ImplGenericInterface1</code> 可以不指定实现的参数类型，而使用泛型直接实现接口的方法。但是实现类本身也必须是泛型类，由于是泛型类 在 <code>new</code> 的时候必须指定其类型.</li><li>实现类 <code>ImplGenericInterface2</code> 可以在实现接口的时候定义接口的实现类型，这样实现类就可以不定义为泛型类而实现接口的方法，在 <code>new</code> 的时候也不用指定参数类型。</li></ol>          </div><h3 id="案例"><a href="# 案例" class="headerlink" title="案例"></a>案例 </h3><p> 在<code>ArrayList</code>集合类就是使用的第一种实现方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayList</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable&#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>Mybatis</code> 的<code>Mapper</code>接口中就运用的第二种实现方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span>   <span class="hljs-comment">//demo</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyBaseMapper</span>&lt;Student&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5- 泛型方法"><a href="#5- 泛型方法" class="headerlink" title="5. 泛型方法"></a>5. 泛型方法 </h2><p> 定义一个泛型方法： private static<code>&lt;T&gt; T</code>genericAdd(T a, T b) {}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericMethod1</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        System.out.println(a + <span class="hljs-string">&quot;+&quot;</span> + b + <span class="hljs-string">&quot;=&quot;</span> + (a + b));<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">genericAdd</span><span class="hljs-params">(T a, T b)</span> &#123;<br>        System.out.println(a + <span class="hljs-string">&quot;+&quot;</span> + b + <span class="hljs-string">&quot;=&quot;</span>+a+b);<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">showKeyName</span><span class="hljs-params">(GenericClass&lt;T&gt; container)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;container key :&quot;</span> + container.getData());<br>        <span class="hljs-comment">// 当然这个例子举的不太合适，只是为了说明泛型方法的特性。</span><br>        <span class="hljs-type">T</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> container.getData();<br>        <span class="hljs-keyword">return</span> test;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        GenericMethod1.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> GenericMethod1.genericAdd(<span class="hljs-number">83</span>, <span class="hljs-number">4343</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> GenericMethod1.genericAdd(<span class="hljs-string">&quot; 我是 &quot;</span>, <span class="hljs-string">&quot; 你大爷 &quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>从上面的泛型方法可以看出：</p><div class="note note-success">            <p><code>&lt;T&gt;</code>表示该方法是泛型方法，在方法体中不需要指定传递的参数类型，参数类型在方法使用的时候指定。</p><p><code>&lt;T&gt;</code>也声明了一个泛型 T，这个 T 可以出现在这个泛型方法的任何位置。</p>          </div><p>泛型的数量也可以任意多个，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T,K&gt; K <span class="hljs-title function_">show</span> <span class="hljs-params">(Generic&lt;T&gt; container)</span>&#123;<br>            ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6- 泛型的类型限制"><a href="#6- 泛型的类型限制" class="headerlink" title="6. 泛型的类型限制"></a>6. 泛型的类型限制 </h2><p> 如果在方法体中需要运算，使用泛型会导致简单的运算都不能执行。因为泛型的类型是在方法使用的时候指定的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">getMin</span><span class="hljs-params">(T a, T b)</span> &#123;<br>    <span class="hljs-keyword">return</span> (a.compareTo(b) &gt; <span class="hljs-number">0</span>) ? a : b;<span class="hljs-comment">// 编译时期报错</span><br>&#125;<br></code></pre></td></tr></table></figure><p>   计算最小值,  <code>compareTO()</code>方法在编译时期就会报错，如果要实现这样的功能就需要对泛型方法的 <code> 类型做出限定</code>。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;T&gt;&gt; T <span class="hljs-title function_">getMin</span><span class="hljs-params">(T a, T b)</span> &#123;<br>    <span class="hljs-keyword">return</span> (a.compareTo(b) &lt; <span class="hljs-number">0</span>) ? a : b;<br>&#125;<br></code></pre></td></tr></table></figure><p> 限定类型使用 <code>extends</code> 关键字指定，可以指定 <code> 类</code>、<code>接口 </code>，类放在前面，接口放在后面用<code>&amp;</code> 符号分割。</p><p>例如：<code>&lt;T extends ArrayList &amp; Comparable&lt;T&gt; &amp; Serializable&gt;</code></p><p> 再看一个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypeLimitForClass</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">List</span> &amp; Serializable&gt; &#123;<br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;String&gt; stringArrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        stringArrayList.add(<span class="hljs-string">&quot;A&quot;</span>);<br>        stringArrayList.add(<span class="hljs-string">&quot;B&quot;</span>);<br><br>        ArrayList&lt;Integer&gt; integerArrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        integerArrayList.add(<span class="hljs-number">1</span>);<br>        integerArrayList.add(<span class="hljs-number">2</span>);<br>        integerArrayList.add(<span class="hljs-number">3</span>);<br><br>        TypeLimitForClass&lt;ArrayList&gt; typeLimitForClass01 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeLimitForClass</span>&lt;&gt;();<br>        typeLimitForClass01.setData(stringArrayList);<br><br>        TypeLimitForClass&lt;ArrayList&gt; typeLimitForClass02 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeLimitForClass</span>&lt;&gt;();<br>        typeLimitForClass02.setData(integerArrayList);<br>        <br>        System.out.println(getMinListSize(typeLimitForClass01.getData().size(), typeLimitForClass02.getData().size()));<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;T&gt;&gt; T <span class="hljs-title function_">getMinListSize</span><span class="hljs-params">(T a, T b)</span> &#123;<br>        <span class="hljs-keyword">return</span> (a.compareTo(b) &lt; <span class="hljs-number">0</span>) ? a : b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>首先 <code>ArrayList</code> 是<code>List</code>的子类，但是 <code>ArrayList</code> 也是个泛型类。虽然创建了 <code>ArrayList&lt;String&gt;</code> 和<code>ArrayList&lt;Integer&gt;</code>但是都能添加到 <code>TypeLimitForClass&lt;ArrayList&gt;</code> 中。说明在类上做泛型的限制，如果传递的参数也是泛型类则不会限制泛型类的泛型类型。</p></li><li><p>在方法 <code>getMinListSize(T a, T b)</code> 中限制了传递参数必须继承 <code>Comparable</code> 类型。所有数字相关的类都实现 Comparable 接口。</p></li></ol><h2 id="7- 通配符"><a href="#7- 通配符" class="headerlink" title="7. 通配符"></a>7. 通配符 </h2><p> 从上面的泛型方法可以看出：</p><div class="note note-success">            <ol><li><code>&lt;? extends Parent&gt;</code> 指定了泛型类型的上限，参数类型必须是 <code>Parent</code> 的子类或者 <code>Parent</code> 本身 </li><li><code>&lt;? super Child&gt;</code> 指定了泛型类型的下限，参数类型必须是<code>Child</code> 的父类，或者 <code>Child</code> 本身 </li><li><code>&lt;?&gt;</code> 指定了没有限制的泛型类型</li><li> 关于通配符其实还有很多知识点，相关连接：[通配符](</li></ol>          </div><h2 id="8- 学以致用"><a href="#8- 学以致用" class="headerlink" title="8. 学以致用"></a>8. 学以致用</h2><h3 id="1- 泛型解析 JSON 数据封装"><a href="#1- 泛型解析 JSON 数据封装" class="headerlink" title="1. 泛型解析 JSON 数据封装"></a>1. 泛型解析 JSON 数据封装</h3><p><code>api 返回的 json 数据</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot; 成功 &quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Jay&quot;</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;10086&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>BaseResponse.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseResponse</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMsg</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>UserResponse.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserResponse</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseResponse</span> &#123;<br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2- 泛型加反射实现复用工具类"><a href="#2- 泛型加反射实现复用工具类" class="headerlink" title="2. 泛型加反射实现复用工具类"></a>2. 泛型加反射实现复用工具类 </h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericUtils</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Movie</span> &#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> Date time;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> name;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getTime</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> time;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">(String name, Date time)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>            <span class="hljs-built_in">this</span>.time = time;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Movie&#123;&quot;</span> + <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> + <span class="hljs-string">&quot;, time=&quot;</span> + time + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Movie&gt; movieList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            movieList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-string">&quot;movie&quot;</span> + i, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot; 排序前:&quot;</span> + movieList.toString());<br><br>        GenericUtils.sortAnyList(movieList, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-literal">true</span>);<br>        System.out.println(<span class="hljs-string">&quot; 按 name 正序排：&quot;</span> + movieList.toString());<br><br>        GenericUtils.sortAnyList(movieList, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-literal">false</span>);<br>        System.out.println(<span class="hljs-string">&quot; 按 name 逆序排：&quot;</span> + movieList.toString());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对任意集合的排序方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> targetList 要排序的实体类 List 集合</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sortField  排序字段</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sortMode   true 正序，false 逆序</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">sortAnyList</span><span class="hljs-params">(List&lt;T&gt; targetList, <span class="hljs-keyword">final</span> String sortField, <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> sortMode)</span> &#123;<br>        <span class="hljs-keyword">if</span> (targetList == <span class="hljs-literal">null</span> || targetList.size() &lt; <span class="hljs-number">2</span> || sortField == <span class="hljs-literal">null</span> || sortField.length() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        Collections.sort(targetList, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Object&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object obj1, Object obj2)</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">retVal</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 获取 getXxx() 方法名称</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">methodStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;get&quot;</span> + sortField.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).toUpperCase() + sortField.substring(<span class="hljs-number">1</span>);<br>                    <span class="hljs-type">Method</span> <span class="hljs-variable">method1</span> <span class="hljs-operator">=</span> ((T) obj1).getClass().getMethod(methodStr, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-type">Method</span> <span class="hljs-variable">method2</span> <span class="hljs-operator">=</span> ((T) obj2).getClass().getMethod(methodStr, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-keyword">if</span> (sortMode) &#123;<br>                        retVal = method1.invoke(((T) obj1), <span class="hljs-literal">null</span>).toString().compareTo(method2.invoke(((T) obj2), <span class="hljs-literal">null</span>).toString());<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        retVal = method2.invoke(((T) obj2), <span class="hljs-literal">null</span>).toString().compareTo(method1.invoke(((T) obj1), <span class="hljs-literal">null</span>).toString());<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;List&lt;&quot;</span> + ((T) obj1).getClass().getName() + <span class="hljs-string">&quot;&gt; 排序异常！&quot;</span>);<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">return</span> retVal;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3- 通用列表排序工具类"><a href="#3- 通用列表排序工具类" class="headerlink" title="3. 通用列表排序工具类"></a>3. 通用列表排序工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通用列表排序</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> targetList</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> vClass 排序字段对象的 class</span><br><span class="hljs-comment">     *               该类需要继承 Compable&lt;T&gt; 接口，否则会抛出 NoSuchMethodException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sortField 需要排序的字段</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> forward 是否正序（升序）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; 列表泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;V&gt; 排序字段泛型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T, V&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">sortAnyList</span><span class="hljs-params">(List&lt;T&gt; targetList, Class&lt;V&gt; vClass, String sortField, <span class="hljs-type">boolean</span> forward)</span> &#123;<br>        <span class="hljs-keyword">if</span> (targetList == <span class="hljs-literal">null</span> || targetList.size() &lt; <span class="hljs-number">2</span> || sortField == <span class="hljs-literal">null</span> || sortField.length() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        Collections.sort(targetList, (o1, o2) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;get&quot;</span> + sortField.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).toUpperCase() + sortField.substring(<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 获取 compareTo(V) 方法</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">compareToName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;compareTo&quot;</span>;<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">compareToMethod</span> <span class="hljs-operator">=</span> vClass.getMethod(compareToName, Object.class);<br>                <span class="hljs-comment">// 获取排序字段值的方法</span><br>                <span class="hljs-type">Method</span> <span class="hljs-variable">getFiledMethod</span> <span class="hljs-operator">=</span> o1.getClass().getMethod(methodName);<br>                <span class="hljs-comment">// 获取两个对象需要排序的值的值</span><br>                <span class="hljs-type">V</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> (V)getFiledMethod.invoke(o1);<br>                <span class="hljs-type">V</span> <span class="hljs-variable">v2</span> <span class="hljs-operator">=</span> (V)getFiledMethod.invoke(o2);<br>                <span class="hljs-keyword">if</span> (forward) &#123;<br>                    <span class="hljs-comment">// 正序</span><br>                    <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)compareToMethod.invoke(v1, v2);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)compareToMethod.invoke(v2, v1);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                System.out.println(<span class="hljs-string">&quot;List&lt;&quot;</span> + o1.getClass().getName() + <span class="hljs-string">&quot;&gt;&quot;</span> + <span class="hljs-string">&quot; 排序异常 &quot;</span>);<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="4-Gson 库中的泛型的使用 -TypeToken"><a href="#4-Gson 库中的泛型的使用 -TypeToken" class="headerlink" title="4. Gson 库中的泛型的使用 -TypeToken"></a>4. Gson 库中的泛型的使用 -TypeToken</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GsonGeneric</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                    <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                    <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        List&lt;Person&gt; personList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            personList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;name&quot;</span> + i, <span class="hljs-number">18</span> + i));<br>        &#125;<br>        <span class="hljs-comment">// Serialization</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> gson.toJson(personList);<br>        System.out.println(json);<br>        <span class="hljs-comment">// Deserialization</span><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">personType</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeToken</span>&lt;List&lt;Person&gt;&gt;() &#123;&#125;.getType();<br>        List&lt;Person&gt; personList2 = gson.fromJson(json, personType);<br>        System.out.println(personList2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结言"><a href="# 结言" class="headerlink" title="结言"></a>结言</h1><div class="note note-success">            <p>该文章为个人学习用，参考了很多资料。我也看了好久：<a href="https://www.jianshu.com/p/986f732ed2f1"><code>Java 泛型详解 </code></a>，<a href="https://blog.csdn.net/s10461/article/details/53941091"><code>Java 泛型方法详解</code></a>，大佬还是大佬呀，把这两篇文章看透也就能完全掌握了。</p><p> 对于 Java 泛型，我也是大致的了解，因为在实际开发中，几乎很少会用到泛型（指“CRUD”）。泛型的使用就是为了复用，而大部分泛型也都出现在项目的架构中。如果不掌握泛型的使用和设计模式的概念的话就直接去阅读源码会很吃力。而不阅读源码，不去理解编写者的思想就等于闭门造车很难进步。时间久了又如何苟且于乱世呢？</p>          </div>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/20/hello-world/"/>
    <url>/2023/02/20/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="开篇"><a href="# 开篇" class="headerlink" title="开篇"></a>开篇</h2><div class="note note-success">            <p>作为第一篇文章, 该文章用来记录一些常用 <code>hexo</code> 配置和对应的 <code>markdown</code> 的一些生僻语法</p>          </div><h3 id="标签写法"><a href="# 标签写法" class="headerlink" title="标签写法"></a>标签写法 </h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> success %&#125;</span><span class="language-xml"></span><br><span class="language-xml"> 文字 或者 markdown 均可 </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><span class="language-xml"> 和 </span><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> success %&#125;</span><span class="language-xml"> 需要单独一行</span><br><span class="language-xml"></span><br><span class="language-xml">html 写法</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span> 标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>样式:</p><div class="note note-primary">            <p>primary</p>          </div><div class="note note-secondary">            <p>secondary</p>          </div><div class="note note-success">            <p>success</p>          </div><div class="note note-danger">            <p>danger</p>          </div><div class="note note-warning">            <p>warning</p>          </div><div class="note note-info">            <p>info</p>          </div><div class="note note-light">            <p>light</p>          </div><h3 id="类图写法"><a href="# 类图写法" class="headerlink" title="类图写法"></a>类图写法</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ada">classDiagram<br>Class01 &lt;|<span class="hljs-comment">-- AveryLongClass : Cool</span><br>Class03 *<span class="hljs-comment">-- Class04</span><br>Class05 o<span class="hljs-comment">-- Class06</span><br>Class07 .. Class08<br>Class09 <span class="hljs-comment">--&gt; C2 : Where am i?</span><br>Class09 <span class="hljs-comment">--* C3</span><br>Class09 <span class="hljs-comment">--|&gt; Class07</span><br>Class07 : <span class="hljs-type">equals</span>()<br>Class07 : <span class="hljs-type">Object</span>[] elementData<br>Class01 : <span class="hljs-type">size</span>()<br>Class01 : <span class="hljs-type">int</span> chimp<br>Class01 : <span class="hljs-type">int</span> gorilla<br>Class08 &lt;<span class="hljs-comment">--&gt; C2: Cool label</span><br></code></pre></td></tr></table></figure><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><pre><code class=" mermaid">classDiagram    Animal &lt;|-- Duck    Animal &lt;|-- Fish    Animal &lt;|-- Zebra    Animal : +int age    Animal : +String gender    Animal: +isMammal()    class Duck&#123;      +String beakColor      +swim()      +quack()    &#125;    class Fish&#123;      -int sizeInFeet      -canEat()    &#125;    class Zebra&#123;      +bool is_wild      +run()    &#125;</code></pre><h3 id="引入哔哩哔哩 - 视频写法"><a href="# 引入哔哩哔哩 - 视频写法" class="headerlink" title="引入哔哩哔哩 视频写法"></a>引入哔哩哔哩 视频写法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: relative; padding: 30% 45%;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//player.bilibili.com/player.html?bvid=BV1sd4y1H7KE&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">framespacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?bvid=BV1sd4y1H7KE" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><h3 id="音乐播放器"><a href="# 音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">marginwidth</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">marginheight</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">298</span> <span class="hljs-attr">height</span>=<span class="hljs-string">52</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//music.163.com/outchain/player?type=2&amp;id=1497588709&amp;auto=1&amp;height=32&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=298 height=52 src="//music.163.com/outchain/player?type=2&id=1497588709&auto=1&height=32"></iframe>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
